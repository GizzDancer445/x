local Library = {}
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")

function Library:CreateWindow(name)
    local RustBeta = Instance.new("ScreenGui")
    local Main = Instance.new("Frame")
    local UICorner = Instance.new("UICorner")
    local TopBar = Instance.new("Frame")
    local UICorner_2 = Instance.new("UICorner")
    local Title = Instance.new("TextLabel")
    local TabHolder = Instance.new("Frame")
    local UIGradient = Instance.new("UIGradient")
    local TabList = Instance.new("UIListLayout")
    local ContentContainer = Instance.new("Frame")
    local UIPadding = Instance.new("UIPadding")
    local Shadow = Instance.new("ImageLabel")

    RustBeta.Name = "RustBeta"
    RustBeta.Parent = game.CoreGui
    RustBeta.ResetOnSpawn = false

    Shadow.Name = "Shadow"
    Shadow.Parent = Main
    Shadow.AnchorPoint = Vector2.new(0.5, 0.5)
    Shadow.BackgroundTransparency = 1
    Shadow.Position = UDim2.new(0.5, 0, 0.5, 0)
    Shadow.Size = UDim2.new(1, 47, 1, 47)
    Shadow.ZIndex = 0
    Shadow.Image = "rbxassetid://6015897843"
    Shadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
    Shadow.ImageTransparency = 0.5
    Shadow.ScaleType = Enum.ScaleType.Slice
    Shadow.SliceCenter = Rect.new(49, 49, 450, 450)

    Main.Name = "Main"
    Main.Parent = RustBeta
    Main.BackgroundColor3 = Color3.fromRGB(22, 22, 22)
    Main.BorderSizePixel = 0
    Main.Position = UDim2.new(0.5, -150, 0.5, -200)
    Main.Size = UDim2.new(0, 300, 0, 400)
    Main.ClipsDescendants = true

    UICorner.CornerRadius = UDim.new(0, 6)
    UICorner.Parent = Main

    TopBar.Name = "TopBar"
    TopBar.Parent = Main
    TopBar.BackgroundColor3 = Color3.fromRGB(0, 130, 246)
    TopBar.Size = UDim2.new(1, 0, 0, 30)

    UICorner_2.CornerRadius = UDim.new(0, 6)
    UICorner_2.Parent = TopBar

    Title.Name = "Title"
    Title.Parent = TopBar
    Title.BackgroundTransparency = 1
    Title.Position = UDim2.new(0.028, 0, 0, 0)
    Title.Size = UDim2.new(0.972, 0, 1, 0)
    Title.Font = Enum.Font.GothamBold
    Title.Text = name
    Title.TextColor3 = Color3.fromRGB(255, 255, 255)
    Title.TextSize = 16
    Title.TextXAlignment = Enum.TextXAlignment.Left

    TabHolder.Name = "TabHolder"
    TabHolder.Parent = Main
    TabHolder.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    TabHolder.BorderSizePixel = 0
    TabHolder.Position = UDim2.new(0, 0, 0, 30)
    TabHolder.Size = UDim2.new(1, 0, 0, 25)

    UIGradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(200, 200, 200))
    })
    UIGradient.Parent = TabHolder

    TabList.Parent = TabHolder
    TabList.FillDirection = Enum.FillDirection.Horizontal
    TabList.SortOrder = Enum.SortOrder.LayoutOrder
    TabList.Padding = UDim.new(0, 2)
    TabList.HorizontalAlignment = Enum.HorizontalAlignment.Left

    ContentContainer.Name = "ContentContainer"
    ContentContainer.Parent = Main
    ContentContainer.BackgroundColor3 = Color3.fromRGB(22, 22, 22)
    ContentContainer.BorderSizePixel = 0
    ContentContainer.Position = UDim2.new(0, 0, 0, 55)
    ContentContainer.Size = UDim2.new(1, 0, 1, -55)

    UIPadding.Parent = ContentContainer
    UIPadding.PaddingBottom = UDim.new(0, 10)
    UIPadding.PaddingLeft = UDim.new(0, 10)
    UIPadding.PaddingRight = UDim.new(0, 10)
    UIPadding.PaddingTop = UDim.new(0, 10)

    -- Enhance the window dragging:
    local dragSpeed = 0.06
    local dragStart, startPos = nil, nil
    local dragging = false

    local dragConnection
    TopBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = Main.Position

            if dragConnection then
                dragConnection:Disconnect()
            end
            
            dragConnection = UserInputService.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = false
                    if dragConnection then
                        dragConnection:Disconnect()
                        dragConnection = nil
                    end
                end
            end)
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local delta = input.Position - dragStart
            local targetPos = UDim2.new(
                startPos.X.Scale,
                startPos.X.Offset + delta.X,
                startPos.Y.Scale,
                startPos.Y.Offset + delta.Y
            )
            
            -- Smooth dragging animation
            TweenService:Create(Main, TweenInfo.new(dragSpeed, Enum.EasingStyle.Sine), {
                Position = targetPos
            }):Play()
        end
    end)

    local Window = {}
    local Tabs = {}
    local SelectedTab = nil
    local TabButtons = {}

    function Window:CreateTab(name)
        local Tab = Instance.new("TextButton")
        local Content = Instance.new("ScrollingFrame")
        local UIListLayout = Instance.new("UIListLayout")
        local TabIndicator = Instance.new("Frame")
        local UICorner_Tab = Instance.new("UICorner")
        
        Tab.Name = name
        Tab.Parent = TabHolder
        Tab.BackgroundTransparency = 1
        Tab.Size = UDim2.new(0, 73, 1, 0)
        Tab.Font = Enum.Font.GothamMedium
        Tab.Text = name
        Tab.TextColor3 = Color3.fromRGB(255, 255, 255)
        Tab.TextSize = 14
        Tab.AutoButtonColor = false

        TabIndicator.Name = "Indicator"
        TabIndicator.Parent = Tab
        TabIndicator.BackgroundColor3 = Color3.fromRGB(0, 130, 246)
        TabIndicator.Position = UDim2.new(0, 0, 1, -2)
        TabIndicator.Size = UDim2.new(1, 0, 0, 2)
        TabIndicator.BackgroundTransparency = 1

        Content.Name = name.."Content"
        Content.Parent = ContentContainer
        Content.BackgroundTransparency = 1
        Content.Size = UDim2.new(1, -20, 1, -20)
        Content.Position = UDim2.new(0, 10, 0, 10)
        Content.ScrollBarThickness = 2
        Content.Visible = false
        Content.AutomaticCanvasSize = Enum.AutomaticSize.Y
        Content.CanvasSize = UDim2.new(0, 0, 0, 0)
        Content.ScrollingDirection = Enum.ScrollingDirection.Y
        Content.BackgroundTransparency = 1

        UIListLayout.Parent = Content
        UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
        UIListLayout.Padding = UDim.new(0, 5)

        -- Tab switching animation
        Tab.MouseButton1Click:Connect(function()
            if SelectedTab == Content then return end
            
            -- Fade out old tab indicator
            if SelectedTab then
                local oldTab = TabButtons[SelectedTab]
                if oldTab then
                    local oldIndicator = oldTab:FindFirstChild("Indicator")
                    if oldIndicator then
                        TweenService:Create(oldIndicator, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {
                            BackgroundTransparency = 1
                        }):Play()
                    end
                end
                SelectedTab.Visible = false
            end

            -- Fade in new tab indicator
            TweenService:Create(TabIndicator, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {
                BackgroundTransparency = 0
            }):Play()

            Content.Visible = true
            SelectedTab = Content
            TabButtons[Content] = Tab
        end)

        -- Set up initial tab
        if #Tabs == 0 then
            Content.Visible = true
            SelectedTab = Content
            TabButtons[Content] = Tab
            TabIndicator.BackgroundTransparency = 0
        else
            TabIndicator.BackgroundTransparency = 1
        end
        
        table.insert(Tabs, Tab)
        
        local TabContent = {}

        function TabContent:CreateToggle(name, default, callback)
            local Toggle = Instance.new("Frame")
            local Background = Instance.new("Frame")
            local UICorner = Instance.new("UICorner")
            local Label = Instance.new("TextLabel")
            local Switch = Instance.new("Frame")
            local UICorner_2 = Instance.new("UICorner")
            local Indicator = Instance.new("Frame")
            local UICorner_3 = Instance.new("UICorner")
            
            Toggle.Name = name
            Toggle.Parent = Content
            Toggle.BackgroundTransparency = 1
            Toggle.Size = UDim2.new(1, 0, 0, 35)

            Background.Name = "Background"
            Background.Parent = Toggle
            Background.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
            Background.Size = UDim2.new(1, -20, 1, -5)
            Background.Position = UDim2.new(0, 10, 0, 0)

            UICorner.CornerRadius = UDim.new(0, 4)
            UICorner.Parent = Background

            Label.Parent = Background
            Label.BackgroundTransparency = 1
            Label.Position = UDim2.new(0, 10, 0, 0)
            Label.Size = UDim2.new(1, -60, 1, 0)
            Label.Font = Enum.Font.GothamMedium
            Label.Text = name
            Label.TextColor3 = Color3.fromRGB(255, 255, 255)
            Label.TextSize = 14
            Label.TextXAlignment = Enum.TextXAlignment.Left

            Switch.Name = "Switch"
            Switch.Parent = Background
            Switch.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
            Switch.Position = UDim2.new(1, -45, 0.5, -10)
            Switch.Size = UDim2.new(0, 35, 0, 20)

            UICorner_2.CornerRadius = UDim.new(1, 0)
            UICorner_2.Parent = Switch

            Indicator.Name = "Indicator"
            Indicator.Parent = Switch
            Indicator.AnchorPoint = Vector2.new(0, 0.5)
            Indicator.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            Indicator.Position = UDim2.new(0, 2, 0.5, 0)
            Indicator.Size = UDim2.new(0, 16, 0, 16)

            UICorner_3.CornerRadius = UDim.new(1, 0)
            UICorner_3.Parent = Indicator

            local enabled = default
            local tweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quad)
            
            local function updateToggle()
                local pos = enabled and UDim2.new(1, -18, 0.5, 0) or UDim2.new(0, 2, 0.5, 0)
                local color = enabled and Color3.fromRGB(0, 130, 246) or Color3.fromRGB(40, 40, 40)
                
                TweenService:Create(Indicator, tweenInfo, {Position = pos}):Play()
                TweenService:Create(Switch, tweenInfo, {BackgroundColor3 = color}):Play()
            end

            Background.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    enabled = not enabled
                    updateToggle()
                    if callback then callback(enabled) end
                end
            end)

            updateToggle()
        end

        function TabContent:CreateSlider(name, min, max, default, callback)
            local Slider = Instance.new("Frame")
            local Background = Instance.new("Frame")
            local UICorner = Instance.new("UICorner")
            local Label = Instance.new("TextLabel")
            local SliderBar = Instance.new("Frame")
            local UICorner_2 = Instance.new("UICorner")
            local SliderFill = Instance.new("Frame")
            local UICorner_3 = Instance.new("UICorner")
            local Value = Instance.new("TextLabel")

            Slider.Name = name
            Slider.Parent = Content
            Slider.BackgroundTransparency = 1
            Slider.Size = UDim2.new(1, 0, 0, 45)

            Background.Name = "Background"
            Background.Parent = Slider
            Background.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
            Background.Size = UDim2.new(1, -20, 1, -5)
            Background.Position = UDim2.new(0, 10, 0, 0)

            UICorner.CornerRadius = UDim.new(0, 4)
            UICorner.Parent = Background

            Label.Parent = Background
            Label.BackgroundTransparency = 1
            Label.Position = UDim2.new(0, 10, 0, 0)
            Label.Size = UDim2.new(1, -60, 0, 20)
            Label.Font = Enum.Font.GothamMedium
            Label.Text = name
            Label.TextColor3 = Color3.fromRGB(255, 255, 255)
            Label.TextSize = 14
            Label.TextXAlignment = Enum.TextXAlignment.Left

            SliderBar.Parent = Background
            SliderBar.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
            SliderBar.Position = UDim2.new(0, 10, 0, 25)
            SliderBar.Size = UDim2.new(1, -20, 0, 6)

            UICorner_2.CornerRadius = UDim.new(1, 0)
            UICorner_2.Parent = SliderBar

            SliderFill.Parent = SliderBar
            SliderFill.BackgroundColor3 = Color3.fromRGB(0, 130, 246)
            SliderFill.Size = UDim2.new((default - min)/(max - min), 0, 1, 0)

            UICorner_3.CornerRadius = UDim.new(1, 0)
            UICorner_3.Parent = SliderFill

            Value.Parent = Background
            Value.BackgroundTransparency = 1
            Value.Position = UDim2.new(1, -50, 0, 0)
            Value.Size = UDim2.new(0, 40, 0, 20)
            Value.Font = Enum.Font.GothamBold
            Value.Text = tostring(default)
            Value.TextColor3 = Color3.fromRGB(255, 255, 255)
            Value.TextSize = 14

            local function updateSlider(input)
                local pos = math.clamp((input.Position.X - SliderBar.AbsolutePosition.X) / SliderBar.AbsoluteSize.X, 0, 1)
                local value = math.floor(min + ((max - min) * pos))
                
                TweenService:Create(SliderFill, TweenInfo.new(0.1), {Size = UDim2.new(pos, 0, 1, 0)}):Play()
                Value.Text = tostring(value)
                if callback then callback(value) end
            end

            SliderBar.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    updateSlider(input)
                    local connection
                    connection = UserInputService.InputChanged:Connect(function(input)
                        if input.UserInputType == Enum.UserInputType.MouseMovement then
                            updateSlider(input)
                        end
                    end)
                    UserInputService.InputEnded:Connect(function(input)
                        if input.UserInputType == Enum.UserInputType.MouseButton1 then
                            if connection then connection:Disconnect() end
                        end
                    end)
                end
            end)
        end

        function TabContent:CreateButton(name, callback)
            local Button = Instance.new("Frame")
            local Background = Instance.new("Frame")
            local UICorner = Instance.new("UICorner")
            local ButtonLabel = Instance.new("TextButton")
            
            Button.Name = name
            Button.Parent = Content
            Button.BackgroundTransparency = 1
            Button.Size = UDim2.new(1, 0, 0, 35)

            Background.Name = "Background"
            Background.Parent = Button
            Background.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
            Background.Size = UDim2.new(1, -20, 1, -5)
            Background.Position = UDim2.new(0, 10, 0, 0)

            UICorner.CornerRadius = UDim.new(0, 4)
            UICorner.Parent = Background

            ButtonLabel.Name = "ButtonLabel"
            ButtonLabel.Parent = Background
            ButtonLabel.BackgroundTransparency = 1
            ButtonLabel.Size = UDim2.new(1, 0, 1, 0)
            ButtonLabel.Font = Enum.Font.GothamBold
            ButtonLabel.Text = name
            ButtonLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
            ButtonLabel.TextSize = 14

            -- Hover and click effects
            local tweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quad)
            
            ButtonLabel.MouseEnter:Connect(function()
                TweenService:Create(Background, tweenInfo, {
                    BackgroundColor3 = Color3.fromRGB(40, 40, 40)
                }):Play()
            end)

            ButtonLabel.MouseLeave:Connect(function()
                TweenService:Create(Background, tweenInfo, {
                    BackgroundColor3 = Color3.fromRGB(30, 30, 30)
                }):Play()
            end)

            ButtonLabel.MouseButton1Down:Connect(function()
                TweenService:Create(Background, tweenInfo, {
                    BackgroundColor3 = Color3.fromRGB(50, 50, 50)
                }):Play()
            end)

            ButtonLabel.MouseButton1Up:Connect(function()
                TweenService:Create(Background, tweenInfo, {
                    BackgroundColor3 = Color3.fromRGB(40, 40, 40)
                }):Play()
                if callback then callback() end
            end)
        end

        function TabContent:CreateDropdown(name, options, default, callback)
            local Dropdown = Instance.new("Frame")
            local Background = Instance.new("Frame")
            local UICorner = Instance.new("UICorner")
            local Label = Instance.new("TextLabel")
            local DropdownButton = Instance.new("TextButton")
            local OptionsFrame = Instance.new("Frame")
            local UIListLayout = Instance.new("UIListLayout")
            local UICorner_2 = Instance.new("UICorner")
            
            Dropdown.Name = name
            Dropdown.Parent = Content
            Dropdown.BackgroundTransparency = 1
            Dropdown.Size = UDim2.new(1, 0, 0, 35)

            Background.Name = "Background"
            Background.Parent = Dropdown
            Background.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
            Background.Size = UDim2.new(1, -20, 1, -5)
            Background.Position = UDim2.new(0, 10, 0, 0)

            UICorner.CornerRadius = UDim.new(0, 4)
            UICorner.Parent = Background

            Label.Parent = Background
            Label.BackgroundTransparency = 1
            Label.Position = UDim2.new(0, 10, 0, 0)
            Label.Size = UDim2.new(0.5, -10, 1, 0)
            Label.Font = Enum.Font.GothamMedium
            Label.Text = name
            Label.TextColor3 = Color3.fromRGB(255, 255, 255)
            Label.TextSize = 14
            Label.TextXAlignment = Enum.TextXAlignment.Left

            DropdownButton.Name = "DropdownButton"
            DropdownButton.Parent = Background
            DropdownButton.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
            DropdownButton.Position = UDim2.new(1, -110, 0.5, -12)
            DropdownButton.Size = UDim2.new(0, 100, 0, 24)
            DropdownButton.Font = Enum.Font.GothamBold
            DropdownButton.Text = default or options[1]
            DropdownButton.TextColor3 = Color3.fromRGB(255, 255, 255)
            DropdownButton.TextSize = 12
            DropdownButton.AutoButtonColor = false

            local UICorner_3 = Instance.new("UICorner")
            UICorner_3.CornerRadius = UDim.new(0, 4)
            UICorner_3.Parent = DropdownButton

            OptionsFrame.Name = "OptionsFrame"
            OptionsFrame.Parent = Background
            OptionsFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
            OptionsFrame.Position = UDim2.new(1, -110, 0, 35)
            OptionsFrame.Size = UDim2.new(0, 100, 0, 0)
            OptionsFrame.Visible = false
            OptionsFrame.ZIndex = 5
            OptionsFrame.ClipsDescendants = true

            UICorner_2.CornerRadius = UDim.new(0, 4)
            UICorner_2.Parent = OptionsFrame

            UIListLayout.Parent = OptionsFrame
            UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
            UIListLayout.Padding = UDim.new(0, 2)

            local isOpen = false
            local tweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quad)

            local function createOption(optionName)
                local Option = Instance.new("TextButton")
                Option.Name = optionName
                Option.Parent = OptionsFrame
                Option.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
                Option.Size = UDim2.new(1, 0, 0, 24)
                Option.Font = Enum.Font.GothamMedium
                Option.Text = optionName
                Option.TextColor3 = Color3.fromRGB(255, 255, 255)
                Option.TextSize = 12
                Option.ZIndex = 5
                Option.AutoButtonColor = false

                Option.MouseEnter:Connect(function()
                    TweenService:Create(Option, tweenInfo, {
                        BackgroundColor3 = Color3.fromRGB(35, 35, 35)
                    }):Play()
                end)

                Option.MouseLeave:Connect(function()
                    TweenService:Create(Option, tweenInfo, {
                        BackgroundColor3 = Color3.fromRGB(25, 25, 25)
                    }):Play()
                end)

                Option.MouseButton1Click:Connect(function()
                    DropdownButton.Text = optionName
                    if callback then callback(optionName) end
                    
                    isOpen = false
                    TweenService:Create(OptionsFrame, tweenInfo, {
                        Size = UDim2.new(0, 100, 0, 0)
                    }):Play()
                    task.wait(0.2)
                    OptionsFrame.Visible = false
                end)

                return Option
            end

            -- Create all options
            for _, optionName in ipairs(options) do
                createOption(optionName)
            end

            DropdownButton.MouseEnter:Connect(function()
                TweenService:Create(DropdownButton, tweenInfo, {
                    BackgroundColor3 = Color3.fromRGB(35, 35, 35)
                }):Play()
            end)

            DropdownButton.MouseLeave:Connect(function()
                TweenService:Create(DropdownButton, tweenInfo, {
                    BackgroundColor3 = Color3.fromRGB(25, 25, 25)
                }):Play()
            end)

            DropdownButton.MouseButton1Click:Connect(function()
                isOpen = not isOpen
                
                if isOpen then
                    OptionsFrame.Size = UDim2.new(0, 100, 0, 0)
                    OptionsFrame.Visible = true
                    TweenService:Create(OptionsFrame, tweenInfo, {
                        Size = UDim2.new(0, 100, 0, #options * 26)
                    }):Play()
                else
                    TweenService:Create(OptionsFrame, tweenInfo, {
                        Size = UDim2.new(0, 100, 0, 0)
                    }):Play()
                    task.wait(0.2)
                    OptionsFrame.Visible = false
                end
            end)

            return {
                GetSelection = function()
                    return DropdownButton.Text
                end
            }
        end

        function TabContent:CreateKeybind(name, default, callback)
            local Keybind = Instance.new("Frame")
            local Background = Instance.new("Frame")
            local UICorner = Instance.new("UICorner")
            local Label = Instance.new("TextLabel")
            local KeyLabel = Instance.new("TextButton")
            local UIStroke = Instance.new("UIStroke")
            
            Keybind.Name = name
            Keybind.Parent = Content
            Keybind.BackgroundTransparency = 1
            Keybind.Size = UDim2.new(1, 0, 0, 35)

            Background.Name = "Background"
            Background.Parent = Keybind
            Background.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
            Background.Size = UDim2.new(1, -20, 1, -5)
            Background.Position = UDim2.new(0, 10, 0, 0)

            UICorner.CornerRadius = UDim.new(0, 4)
            UICorner.Parent = Background

            Label.Parent = Background
            Label.BackgroundTransparency = 1
            Label.Position = UDim2.new(0, 10, 0, 0)
            Label.Size = UDim2.new(1, -110, 1, 0)
            Label.Font = Enum.Font.GothamMedium
            Label.Text = name
            Label.TextColor3 = Color3.fromRGB(255, 255, 255)
            Label.TextSize = 14
            Label.TextXAlignment = Enum.TextXAlignment.Left

            KeyLabel.Name = "KeyLabel"
            KeyLabel.Parent = Background
            KeyLabel.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
            KeyLabel.Position = UDim2.new(1, -100, 0.5, -12)
            KeyLabel.Size = UDim2.new(0, 90, 0, 24)
            KeyLabel.Font = Enum.Font.GothamBold
            KeyLabel.Text = default and default.Name or "None"
            KeyLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
            KeyLabel.TextSize = 12
            KeyLabel.AutoButtonColor = false

            UIStroke.Parent = KeyLabel
            UIStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
            UIStroke.Color = Color3.fromRGB(60, 60, 60)
            UIStroke.Thickness = 1

            local UICorner_2 = Instance.new("UICorner")
            UICorner_2.CornerRadius = UDim.new(0, 4)
            UICorner_2.Parent = KeyLabel

            local binding = false
            local currentKey = default
            local tweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quad)

            KeyLabel.MouseEnter:Connect(function()
                TweenService:Create(KeyLabel, tweenInfo, {
                    BackgroundColor3 = Color3.fromRGB(35, 35, 35)
                }):Play()
            end)

            KeyLabel.MouseLeave:Connect(function()
                TweenService:Create(KeyLabel, tweenInfo, {
                    BackgroundColor3 = Color3.fromRGB(25, 25, 25)
                }):Play()
            end)

            KeyLabel.MouseButton1Click:Connect(function()
                if binding then return end
                binding = true
                KeyLabel.Text = "..."

                local connection
                connection = UserInputService.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.Keyboard then
                        currentKey = input.KeyCode
                        KeyLabel.Text = currentKey.Name
                        if callback then callback(currentKey) end
                        binding = false
                        connection:Disconnect()
                    end
                end)
            end)

            return {
                GetKey = function()
                    return currentKey
                end
            }
        end

        function TabContent:CreateColorPicker(name, default, callback)
            local ColorPicker = Instance.new("Frame")
            local Background = Instance.new("Frame")
            local UICorner = Instance.new("UICorner")
            local Label = Instance.new("TextLabel")
            local ColorDisplay = Instance.new("Frame")
            local UICorner_2 = Instance.new("UICorner")
            
            -- Color Picker UI
            local PickerFrame = Instance.new("Frame")
            local UICorner_3 = Instance.new("UICorner")
            local Gradient = Instance.new("Frame")
            local UIGradient = Instance.new("UIGradient")
            local UICorner_4 = Instance.new("UICorner")
            local Saturation = Instance.new("ImageLabel")
            local UICorner_5 = Instance.new("UICorner")
            local Cursor = Instance.new("ImageLabel")
            local HueSlider = Instance.new("Frame")
            local UICorner_6 = Instance.new("UICorner")
            local HueGradient = Instance.new("UIGradient")
            local HueCursor = Instance.new("Frame")
            local UICorner_7 = Instance.new("UICorner")
            local TransparencySlider = Instance.new("Frame")
            local UICorner_8 = Instance.new("UICorner")
            local TransparencyGradient = Instance.new("UIGradient")
            local TransCursor = Instance.new("Frame")
            local UICorner_9 = Instance.new("UICorner")
            local ConfirmButton = Instance.new("ImageButton")
            local CancelButton = Instance.new("ImageButton")
            
            ColorPicker.Name = name
            ColorPicker.Parent = Content
            ColorPicker.BackgroundTransparency = 1
            ColorPicker.Size = UDim2.new(1, 0, 0, 35)

            Background.Name = "Background"
            Background.Parent = ColorPicker
            Background.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
            Background.Size = UDim2.new(1, -20, 1, -5)
            Background.Position = UDim2.new(0, 10, 0, 0)

            UICorner.CornerRadius = UDim.new(0, 4)
            UICorner.Parent = Background

            Label.Parent = Background
            Label.BackgroundTransparency = 1
            Label.Position = UDim2.new(0, 10, 0, 0)
            Label.Size = UDim2.new(1, -60, 1, 0)
            Label.Font = Enum.Font.GothamMedium
            Label.Text = name
            Label.TextColor3 = Color3.fromRGB(255, 255, 255)
            Label.TextSize = 14
            Label.TextXAlignment = Enum.TextXAlignment.Left

            ColorDisplay.Name = "ColorDisplay"
            ColorDisplay.Parent = Background
            ColorDisplay.BackgroundColor3 = default or Color3.fromRGB(255, 255, 255)
            ColorDisplay.Position = UDim2.new(1, -45, 0.5, -10)
            ColorDisplay.Size = UDim2.new(0, 35, 0, 20)

            UICorner_2.CornerRadius = UDim.new(0, 4)
            UICorner_2.Parent = ColorDisplay

            -- Create Color Picker Frame
            PickerFrame.Name = "PickerFrame"
            PickerFrame.Parent = Background
            PickerFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
            PickerFrame.Position = UDim2.new(1, 10, 0, 0)
            PickerFrame.Size = UDim2.new(0, 200, 0, 240)
            PickerFrame.Visible = false
            PickerFrame.ZIndex = 10

            UICorner_3.CornerRadius = UDim.new(0, 6)
            UICorner_3.Parent = PickerFrame

            Gradient.Name = "Gradient"
            Gradient.Parent = PickerFrame
            Gradient.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
            Gradient.Position = UDim2.new(0, 10, 0, 10)
            Gradient.Size = UDim2.new(1, -20, 0, 160)
            Gradient.ZIndex = 11

            UICorner_4.CornerRadius = UDim.new(0, 4)
            UICorner_4.Parent = Gradient

            Saturation.Name = "Saturation"
            Saturation.Parent = Gradient
            Saturation.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            Saturation.Size = UDim2.new(1, 0, 1, 0)
            Saturation.ZIndex = 12
            Saturation.Image = "rbxassetid://4155801252"

            UICorner_5.CornerRadius = UDim.new(0, 4)
            UICorner_5.Parent = Saturation

            Cursor.Name = "Cursor"
            Cursor.Parent = Saturation
            Cursor.BackgroundTransparency = 1
            Cursor.Size = UDim2.new(0, 8, 0, 8)
            Cursor.ZIndex = 15
            Cursor.Image = "rbxassetid://5100115962"

            HueSlider.Name = "HueSlider"
            HueSlider.Parent = PickerFrame
            HueSlider.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            HueSlider.Position = UDim2.new(0, 10, 0, 180)
            HueSlider.Size = UDim2.new(1, -20, 0, 15)
            HueSlider.ZIndex = 11

            UICorner_6.CornerRadius = UDim.new(0, 4)
            UICorner_6.Parent = HueSlider

            HueGradient.Color = ColorSequence.new({
                ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)),
                ColorSequenceKeypoint.new(0.167, Color3.fromRGB(255, 255, 0)),
                ColorSequenceKeypoint.new(0.333, Color3.fromRGB(0, 255, 0)),
                ColorSequenceKeypoint.new(0.5, Color3.fromRGB(0, 255, 255)),
                ColorSequenceKeypoint.new(0.667, Color3.fromRGB(0, 0, 255)),
                ColorSequenceKeypoint.new(0.833, Color3.fromRGB(255, 0, 255)),
                ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 0))
            })
            HueGradient.Parent = HueSlider

            HueCursor.Name = "HueCursor"
            HueCursor.Parent = HueSlider
            HueCursor.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            HueCursor.Size = UDim2.new(0, 3, 1, 0)
            HueCursor.ZIndex = 12

            UICorner_7.CornerRadius = UDim.new(0, 2)
            UICorner_7.Parent = HueCursor

            TransparencySlider.Name = "TransparencySlider"
            TransparencySlider.Parent = PickerFrame
            TransparencySlider.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            TransparencySlider.Position = UDim2.new(0, 10, 0, 205)
            TransparencySlider.Size = UDim2.new(1, -20, 0, 15)
            TransparencySlider.ZIndex = 11

            UICorner_8.CornerRadius = UDim.new(0, 4)
            UICorner_8.Parent = TransparencySlider

            TransparencyGradient.Transparency = NumberSequence.new({
                NumberSequenceKeypoint.new(0, 0),
                NumberSequenceKeypoint.new(1, 1)
            })
            TransparencyGradient.Parent = TransparencySlider

            TransCursor.Name = "TransCursor"
            TransCursor.Parent = TransparencySlider
            TransCursor.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            TransCursor.Size = UDim2.new(0, 3, 1, 0)
            TransCursor.ZIndex = 12

            UICorner_9.CornerRadius = UDim.new(0, 2)
            UICorner_9.Parent = TransCursor

            ConfirmButton.Name = "ConfirmButton"
            ConfirmButton.Parent = PickerFrame
            ConfirmButton.BackgroundTransparency = 1
            ConfirmButton.Position = UDim2.new(1, -35, 0, 5)
            ConfirmButton.Size = UDim2.new(0, 25, 0, 25)
            ConfirmButton.ZIndex = 12
            ConfirmButton.Image = "rbxassetid://3926305904"
            ConfirmButton.ImageRectOffset = Vector2.new(644, 204)
            ConfirmButton.ImageRectSize = Vector2.new(36, 36)
            ConfirmButton.ImageColor3 = Color3.fromRGB(0, 255, 0)

            CancelButton.Name = "CancelButton"
            CancelButton.Parent = PickerFrame
            CancelButton.BackgroundTransparency = 1
            CancelButton.Position = UDim2.new(1, -65, 0, 5)
            CancelButton.Size = UDim2.new(0, 25, 0, 25)
            CancelButton.ZIndex = 12
            CancelButton.Image = "rbxassetid://3926305904"
            CancelButton.ImageRectOffset = Vector2.new(924, 724)
            CancelButton.ImageRectSize = Vector2.new(36, 36)
            CancelButton.ImageColor3 = Color3.fromRGB(255, 0, 0)

            -- Variables
            local pickerOpen = false
            local hue, sat, val = 0, 0, 1
            local transparency = 0
            local selectedColor = default or Color3.fromRGB(255, 255, 255)

            -- Functions
            local function updateColor()
                local color = Color3.fromHSV(hue, sat, val)
                ColorDisplay.BackgroundColor3 = color
                Gradient.BackgroundColor3 = Color3.fromHSV(hue, 1, 1)
                selectedColor = color
            end

            -- Events
            ColorDisplay.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    pickerOpen = not pickerOpen
                    
                    if pickerOpen then
                        -- Position the picker frame relative to the ColorDisplay
                        local absPos = ColorDisplay.AbsolutePosition
                        local absSize = ColorDisplay.AbsoluteSize
                        PickerFrame.Position = UDim2.new(0, absPos.X + absSize.X + 10, 0, absPos.Y)
                        PickerFrame.Visible = true
                        
                        -- Fade in animation
                        PickerFrame.BackgroundTransparency = 1
                        for _, obj in pairs(PickerFrame:GetDescendants()) do
                            if obj:IsA("Frame") or obj:IsA("TextLabel") or obj:IsA("ImageLabel") then
                                obj.BackgroundTransparency = 1
                            end
                        end
                        
                        TweenService:Create(PickerFrame, TweenInfo.new(0.2), {
                            BackgroundTransparency = 0
                        }):Play()
                        
                        for _, obj in pairs(PickerFrame:GetDescendants()) do
                            if obj:IsA("Frame") or obj:IsA("TextLabel") or obj:IsA("ImageLabel") then
                                TweenService:Create(obj, TweenInfo.new(0.2), {
                                    BackgroundTransparency = 0
                                }):Play()
                            end
                        end
                    else
                        -- Fade out animation
                        TweenService:Create(PickerFrame, TweenInfo.new(0.2), {
                            BackgroundTransparency = 1
                        }):Play()
                        
                        for _, obj in pairs(PickerFrame:GetDescendants()) do
                            if obj:IsA("Frame") or obj:IsA("TextLabel") or obj:IsA("ImageLabel") then
                                TweenService:Create(obj, TweenInfo.new(0.2), {
                                    BackgroundTransparency = 1
                                }):Play()
                            end
                        end
                        
                        task.wait(0.2)
                        PickerFrame.Visible = false
                    end
                end
            end)

            Saturation.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    local function update()
                        local pos = game:GetService("UserInputService"):GetMouseLocation() - Saturation.AbsolutePosition
                        local x = math.clamp(pos.X / Saturation.AbsoluteSize.X, 0, 1)
                        local y = math.clamp(pos.Y / Saturation.AbsoluteSize.Y, 0, 1)
                        Cursor.Position = UDim2.new(x, -4, y, -4)
                        sat = x
                        val = 1 - y
                        updateColor()
                    end
                    
                    local connection
                    connection = game:GetService("RunService").RenderStepped:Connect(update)
                    
                    game:GetService("UserInputService").InputEnded:Connect(function(input)
                        if input.UserInputType == Enum.UserInputType.MouseButton1 then
                            if connection then connection:Disconnect() end
                        end
                    end)
                    
                    update()
                end
            end)

            HueSlider.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    local function update()
                        local pos = game:GetService("UserInputService"):GetMouseLocation() - HueSlider.AbsolutePosition
                        local x = math.clamp(pos.X / HueSlider.AbsoluteSize.X, 0, 1)
                        HueCursor.Position = UDim2.new(x, -1, 0, 0)
                        hue = x
                        updateColor()
                    end
                    
                    local connection
                    connection = game:GetService("RunService").RenderStepped:Connect(update)
                    
                    game:GetService("UserInputService").InputEnded:Connect(function(input)
                        if input.UserInputType == Enum.UserInputType.MouseButton1 then
                            if connection then connection:Disconnect() end
                        end
                    end)
                    
                    update()
                end
            end)

            TransparencySlider.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    local function update()
                        local pos = game:GetService("UserInputService"):GetMouseLocation() - TransparencySlider.AbsolutePosition
                        local x = math.clamp(pos.X / TransparencySlider.AbsoluteSize.X, 0, 1)
                        TransCursor.Position = UDim2.new(x, -1, 0, 0)
                        transparency = x
                    end
                    
                    local connection
                    connection = game:GetService("RunService").RenderStepped:Connect(update)
                    
                    game:GetService("UserInputService").InputEnded:Connect(function(input)
                        if input.UserInputType == Enum.UserInputType.MouseButton1 then
                            if connection then connection:Disconnect() end
                        end
                    end)
                    
                    update()
                end
            end)

            ConfirmButton.MouseButton1Click:Connect(function()
                pickerOpen = false
                PickerFrame.Visible = false
                if callback then
                    callback(selectedColor, transparency)
                end
            end)

            CancelButton.MouseButton1Click:Connect(function()
                pickerOpen = false
                PickerFrame.Visible = false
            end)

            return {
                SetColor = function(color)
                    local h, s, v = color:ToHSV()
                    hue, sat, val = h, s, v
                    updateColor()
                end,
                GetColor = function()
                    return selectedColor, transparency
                end
            }
        end

        Tab.MouseButton1Click:Connect(function()
            if SelectedTab == Content then return end
            if SelectedTab then SelectedTab.Visible = false end
            Content.Visible = true
            SelectedTab = Content
        end)

        if #Tabs == 0 then
            Content.Visible = true
            SelectedTab = Content
        end
        
        table.insert(Tabs, Tab)
        return TabContent
    end

    function Window:AddMenuKeybind(default)
        local keybind = Enum.KeyCode[default] or Enum.KeyCode.RightShift
        
        UserInputService.InputBegan:Connect(function(input, gameProcessed)
            if not gameProcessed and input.KeyCode == keybind then
                MenuToggled = not MenuToggled
                
                -- Animate the menu
                TweenService:Create(Main, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {
                    Position = MenuToggled and UDim2.new(0.5, -150, 0.5, -200) or UDim2.new(0.5, -150, 1.5, 0)
                }):Play()
            end
        end)
    end

    function Window:CreateConfigSystem()
        -- Add this to your last tab
        local ConfigTab = self:CreateTab("Config")
        
        ConfigTab:CreateButton("Save Config", function()
            local config = {}
            -- Add your config saving logic here
            writefile("config.txt", game:GetService("HttpService"):JSONEncode(config))
        end)
        
        ConfigTab:CreateButton("Load Config", function()
            if isfile("config.txt") then
                local config = game:GetService("HttpService"):JSONDecode(readfile("config.txt"))
                -- Add your config loading logic here
            end
        end)
    end

    function Window:AddDestroyButton()
        local DestroyButton = Instance.new("TextButton")
        local UICorner = Instance.new("UICorner")
        
        DestroyButton.Name = "DestroyButton"
        DestroyButton.Parent = TopBar
        DestroyButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
        DestroyButton.Position = UDim2.new(1, -25, 0.5, -8)
        DestroyButton.Size = UDim2.new(0, 16, 0, 16)
        DestroyButton.Font = Enum.Font.GothamBold
        DestroyButton.Text = "X"
        DestroyButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        DestroyButton.TextSize = 12
        DestroyButton.AutoButtonColor = false

        UICorner.CornerRadius = UDim.new(0, 4)
        UICorner.Parent = DestroyButton

        -- Hover and click effects
        local tweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quad)
        
        DestroyButton.MouseEnter:Connect(function()
            TweenService:Create(DestroyButton, tweenInfo, {
                BackgroundColor3 = Color3.fromRGB(200, 0, 0)
            }):Play()
        end)

        DestroyButton.MouseLeave:Connect(function()
            TweenService:Create(DestroyButton, tweenInfo, {
                BackgroundColor3 = Color3.fromRGB(255, 0, 0)
            }):Play()
        end)

        DestroyButton.MouseButton1Click:Connect(function()
            RustBeta:Destroy()
        end)
    end

    return Window
end
return Library
